[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "kong-guard-ai"
version = "2.0.0"
description = "Enterprise AI-powered security plugin for Kong Gateway with advanced threat detection"
readme = "README.md"
license = {text = "Proprietary"}
authors = [
    {name = "Jacques Wainwright", email = "jacques@jacqueswainwright.com"}
]
maintainers = [
    {name = "Jacques Wainwright", email = "jacques@jacqueswainwright.com"}
]
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: Other/Proprietary License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Security",
    "Topic :: System :: Networking :: Monitoring"
]
keywords = ["kong", "security", "ai", "gateway", "plugin", "threat-detection"]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "httpx>=0.25.0",
    "supabase>=2.0.0",
    "redis>=5.0.0",
    "psycopg2-binary>=2.9.7",
    "anthropic>=0.7.0",
    "openai>=1.3.0",
    "google-generativeai>=0.3.0",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "aiofiles>=23.2.1",
    "typer>=0.9.0",
    "rich>=13.6.0",
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "pip-tools>=7.3.0",
    "httpx>=0.25.0"
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "playwright>=1.39.0",
    "responses>=0.24.0"
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0"
]

[project.urls]
Homepage = "https://github.com/DankeyDevDave/KongGuardAI"
Repository = "https://github.com/DankeyDevDave/KongGuardAI"
Issues = "https://github.com/DankeyDevDave/KongGuardAI/issues"
Changelog = "https://github.com/DankeyDevDave/KongGuardAI/blob/main/CHANGELOG.md"

[project.scripts]
kong-guard = "kongguard.cli:main"
kg-demo = "kongguard.attack_demos:demo_main"
kg-train = "kongguard.ml_models:train_main"

[tool.hatch.build.targets.wheel]
packages = ["src/kongguard"]

[tool.hatch.version]
path = "src/kongguard/__init__.py"

# Ruff configuration
[tool.ruff]
line-length = 120
target-version = "py311"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "S",   # bandit
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PLR", # pylint refactor
    "PLW", # pylint warning
    "PLE", # pylint error
]
ignore = [
    "S101",  # assert used
    "S105",  # hardcoded password string
    "S106",  # hardcoded password func arg
    "S107",  # hardcoded password default
    "PLR0913",  # too many arguments
    "PLR2004",  # magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG001"]
"src/kongguard/attack_demos/*" = ["S102", "S608", "S701"]

[tool.ruff.lint.isort]
known-first-party = ["kongguard"]
force-single-line = true

# Black configuration
[tool.black]
line-length = 120
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "supabase.*",
    "redis.*",
    "anthropic.*",
    "openai.*",
    "google.generativeai.*",
    "sklearn.*",
    "numpy.*",
    "pandas.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = """
    --strict-markers
    --strict-config
    --cov=src/kongguard
    --cov=ai-service/agents
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=80
"""
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["src/kongguard", "ai-service/agents"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/cli.py",
    "ai-service/agents/tools/*.py",
    "ai-service/agents/run_*.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
precision = 2

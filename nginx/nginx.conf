user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main buffer=32k flush=1m;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               text/x-js text/x-cross-domain-policy application/x-font-ttf 
               application/x-font-opentype application/vnd.ms-fontobject 
               image/x-icon;
    gzip_disable "msie6";

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    # Cache settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=kong_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Upstream definitions
    upstream kong_proxy {
        least_conn;
        server kong:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream kong_proxy_ssl {
        least_conn;
        server kong:8443 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream fastapi_backend {
        least_conn;
        server fastapi:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream grafana_backend {
        server grafana:3000 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        listen [::]:80;
        server_name _;

        # Let's Encrypt challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name kongguard.ai www.kongguard.ai;

        # SSL certificates
        ssl_certificate /etc/letsencrypt/live/kongguard.ai/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/kongguard.ai/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/kongguard.ai/chain.pem;

        # DH parameters (generate if missing during startup)
        # ssl_dhparam /etc/nginx/dhparam.pem;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.kongguard.ai wss://kongguard.ai;" always;

        # Root location - Kong proxy
        location / {
            limit_req zone=general burst=20 nodelay;
            limit_conn addr 10;

            proxy_pass http://kong_proxy;
            proxy_http_version 1.1;
            
            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Cache
            proxy_cache kong_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_bypass $http_cache_control;
            add_header X-Cache-Status $upstream_cache_status;
        }

        # FastAPI Management API
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            rewrite ^/api/(.*) /$1 break;
            proxy_pass http://fastapi_backend;
            proxy_http_version 1.1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Disable buffering for SSE
            proxy_buffering off;
            proxy_cache off;
        }

        # API Documentation
        location /docs {
            proxy_pass http://fastapi_backend/docs;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /redoc {
            proxy_pass http://fastapi_backend/redoc;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /openapi.json {
            proxy_pass http://fastapi_backend/openapi.json;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # Health check endpoints
        location /health {
            access_log off;
            proxy_pass http://kong_proxy/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        location /api/health {
            access_log off;
            proxy_pass http://fastapi_backend/health;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # Grafana (with authentication)
        location /grafana/ {
            auth_basic "Grafana Access";
            # Note: /etc/nginx/.htpasswd must be created during deployment
            # Example: htpasswd -c /etc/nginx/.htpasswd admin
            auth_basic_user_file /etc/nginx/.htpasswd;
            
            rewrite ^/grafana/(.*) /$1 break;
            proxy_pass http://grafana_backend;
            proxy_http_version 1.1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Block access to sensitive paths
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ /\.git {
            deny all;
        }

        location ~ /\.env {
            deny all;
        }

        # Custom error pages
        error_page 403 /403.html;
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /403.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /404.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # Kong Admin API (internal only)
    server {
        listen 127.0.0.1:8001;
        server_name localhost;

        location / {
            proxy_pass http://kong:8001;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }

    # Prometheus metrics endpoint (internal only)
    server {
        listen 127.0.0.1:9091;
        server_name localhost;
        
        # Basic nginx stub_status endpoint (not Prometheus metrics)
        location /metrics {
            stub_status;
            access_log off;
            # For real Prometheus metrics, use nginx-prometheus-exporter
        }
    }
}
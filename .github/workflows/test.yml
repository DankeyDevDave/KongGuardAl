name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[test]"

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            -v \
            --cov=src/kongguard \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --cov-fail-under=80 \
            --junit-xml=pytest-results.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            coverage.xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: kong
          POSTGRES_USER: kong
          POSTGRES_DB: kong
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[test]"

      - name: Set up test environment
        env:
          DATABASE_URL: postgresql://kong:kong@localhost:5432/kong
          REDIS_URL: redis://localhost:6379
          AI_SERVICE_URL: http://localhost:8080
        run: |
          # Run database migrations
          alembic upgrade head || echo "No migrations to run"

      - name: Start mock AI service
        run: |
          # Start a simple mock AI service for testing
          python -m http.server 8080 --directory tests/fixtures &
          sleep 5

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://kong:kong@localhost:5432/kong
          REDIS_URL: redis://localhost:6379
          AI_SERVICE_URL: http://localhost:8080
        run: |
          pytest tests/integration/ \
            -v \
            --junit-xml=integration-results.xml

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-results
          path: integration-results.xml

  kong-tests:
    name: Kong Plugin Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install kong-pongo
        run: |
          git clone https://github.com/Kong/kong-pongo.git /tmp/kong-pongo
          mkdir -p ~/.local/bin
          ln -s /tmp/kong-pongo/pongo.sh ~/.local/bin/pongo
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run Kong plugin tests
        working-directory: kong-plugin
        run: |
          pongo run -v -o gtest ../spec/

      - name: Upload Kong test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kong-test-results
          path: kong-plugin/servroot/logs/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose-demo.yml build

      - name: Start services
        run: |
          docker-compose -f docker-compose-demo.yml up -d
          sleep 60  # Wait for services to be ready

      - name: Wait for services to be healthy
        run: |
          timeout 300 bash -c '
            until docker-compose -f docker-compose-demo.yml ps | grep -q "healthy"; do
              echo "Waiting for services to be healthy..."
              sleep 10
            done
          '

      - name: Set up Node.js for Playwright
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Playwright
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          npx playwright test
        env:
          BASE_URL: http://localhost:8000

      - name: Upload Playwright results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/

      - name: Check service logs
        if: failure()
        run: |
          docker-compose -f docker-compose-demo.yml logs

      - name: Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose-demo.yml down -v

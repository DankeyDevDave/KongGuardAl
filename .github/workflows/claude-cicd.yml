name: Claude Intelligent CI/CD

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  smart-analysis:
    name: Claude Smart Analysis
    runs-on: ubuntu-latest
    outputs:
      skip_tests: ${{ steps.claude-analyze.outputs.skip_tests }}
      test_focus: ${{ steps.claude-analyze.outputs.test_focus }}
      build_strategy: ${{ steps.claude-analyze.outputs.build_strategy }}

    steps:
      - name: Send Start Notification
        run: |
          curl -H "Title: 🤖 Claude CI/CD Started" \
               -H "Priority: 3" \
               -d "Analyzing changes on ${{ github.ref_name }} branch" \
               https://notify.jacqueswainwright.com/github-runner || true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Claude Analyze Changes
        id: claude-analyze
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }} 2>/dev/null || git diff --name-only HEAD~1..HEAD)

          # Ask Claude to analyze what needs testing
          ANALYSIS=$(curl -X POST https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d @- <<EOF | jq -r '.content[0].text'
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 500,
            "messages": [{
              "role": "user",
              "content": "Analyze these changed files and determine the optimal CI strategy. Return JSON only.\n\nChanged files:\n$CHANGED_FILES\n\nReturn format:\n{\n  \"skip_tests\": false,\n  \"test_focus\": [\"unit\", \"integration\", \"e2e\"],\n  \"build_strategy\": \"full|incremental|skip\",\n  \"affected_services\": [\"backend\", \"frontend\"],\n  \"risk_level\": \"low|medium|high\"\n}"
            }]
          }
          EOF
          )

          echo "$ANALYSIS" > analysis.json
          echo "skip_tests=$(echo "$ANALYSIS" | jq -r '.skip_tests')" >> $GITHUB_OUTPUT
          echo "test_focus=$(echo "$ANALYSIS" | jq -c '.test_focus')" >> $GITHUB_OUTPUT
          echo "build_strategy=$(echo "$ANALYSIS" | jq -r '.build_strategy')" >> $GITHUB_OUTPUT

  intelligent-build:
    name: Smart Build
    needs: smart-analysis
    runs-on: ubuntu-latest
    if: needs.smart-analysis.outputs.build_strategy != 'skip'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Ensure python command is available
        run: |
          # Create python symlink if it doesn't exist
          if ! command -v python &> /dev/null; then
            if command -v python3 &> /dev/null; then
              sudo ln -sf $(which python3) /usr/local/bin/python || true
            fi
          fi
          # Verify python is available
          python --version || python3 --version

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build Frontend
        run: |
          echo "📦 Installing frontend dependencies..."
          cd frontend
          npm ci

          echo "🏗️ Building frontend for production..."
          CI=false REACT_APP_API_URL="" npm run build

          echo "✅ Frontend build complete"
          ls -la build/ || echo "Build directory not created"

      - name: Smart Backend Build
        if: contains(fromJson(needs.smart-analysis.outputs.test_focus), 'backend')
        run: |
          echo "📦 Installing backend dependencies..."
          # Determine which Python command to use
          if command -v python3 &> /dev/null; then
            PIP_CMD="python3 -m pip"
          elif command -v python &> /dev/null; then
            PIP_CMD="python -m pip"
          else
            echo "Python not found"
            exit 1
          fi

          $PIP_CMD install -r requirements.txt

          echo "🔍 Running backend linting..."
          $PIP_CMD install ruff
          ruff check api/ --fix

      - name: Smart Frontend Build
        if: contains(fromJson(needs.smart-analysis.outputs.test_focus), 'frontend')
        run: |
          echo "📦 Installing frontend dependencies..."
          cd frontend
          npm ci

          echo "🏗️ Building frontend..."
          CI=false npm run build

          echo "📁 Verifying build output..."
          ls -la build/
          ls -la build/static/ || echo "Static directory not found"

  claude-assisted-tests:
    name: Claude-Assisted Testing
    needs: [smart-analysis, intelligent-build]
    runs-on: ubuntu-latest
    if: needs.smart-analysis.outputs.skip_tests == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Test Environment
        run: |
          # Determine which Python command to use
          if command -v python3 &> /dev/null; then
            PIP_CMD="python3 -m pip"
          elif command -v python &> /dev/null; then
            PIP_CMD="python -m pip"
          else
            echo "Python not found"
            exit 1
          fi

          # Setup Python
          $PIP_CMD install -r requirements.txt
          $PIP_CMD install pytest pytest-cov pytest-asyncio

          # Setup Node
          cd frontend && npm ci && cd ..

      - name: Run Focused Tests
        id: run-tests
        continue-on-error: true
        run: |
          TEST_FOCUS='${{ needs.smart-analysis.outputs.test_focus }}'

          # Run backend tests if needed
          if echo "$TEST_FOCUS" | grep -q "unit\|integration"; then
            echo "🧪 Running backend tests..."
            # Determine which Python command to use
            if command -v python3 &> /dev/null; then
              PYTHON_CMD="python3"
            elif command -v python &> /dev/null; then
              PYTHON_CMD="python"
            else
              echo "Python not found"
              exit 1
            fi
            $PYTHON_CMD -m pytest tests/ -v --cov=api --cov-report=xml > backend_test_output.txt 2>&1 || true
          fi

          # Run frontend tests if needed
          if echo "$TEST_FOCUS" | grep -q "unit\|e2e"; then
            echo "🧪 Running frontend tests..."
            cd frontend
            npm test -- --watchAll=false > ../frontend_test_output.txt 2>&1 || true
            cd ..
          fi

          # Check if tests passed
          if grep -q "FAILED" backend_test_output.txt frontend_test_output.txt 2>/dev/null; then
            echo "test_status=failed" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "test_status=passed" >> $GITHUB_OUTPUT
          fi

      - name: Claude Debug Failed Tests
        if: failure()
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Send test failure notification
          curl -H "Title: 🚨 Test Failures Detected" \
               -H "Priority: 4" \
               -d "Claude is analyzing test failures on ${{ github.ref_name }}" \
               https://notify.jacqueswainwright.com/github-runner || true

          # Combine test outputs
          TEST_OUTPUT=""
          [ -f backend_test_output.txt ] && TEST_OUTPUT="$TEST_OUTPUT\n\nBackend Tests:\n$(tail -100 backend_test_output.txt)"
          [ -f frontend_test_output.txt ] && TEST_OUTPUT="$TEST_OUTPUT\n\nFrontend Tests:\n$(tail -100 frontend_test_output.txt)"

          # Ask Claude to debug
          DEBUG_HELP=$(curl -X POST https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d @- <<EOF | jq -r '.content[0].text'
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 800,
            "messages": [{
              "role": "user",
              "content": "Debug these test failures and suggest fixes:\n\n$TEST_OUTPUT\n\nProvide:\n1. Root cause analysis\n2. Specific fix suggestions\n3. Commands to run for debugging"
            }]
          }
          EOF
          )

          # Create issue comment with debug help
          echo "## 🤖 Claude Test Debugging Assistant" > debug_comment.md
          echo "" >> debug_comment.md
          echo "$DEBUG_HELP" >> debug_comment.md

          # Post to PR if this is a PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body-file debug_comment.md
          fi

  performance-analysis:
    name: Claude Performance Analysis
    needs: [intelligent-build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        run: |
          # Check if Python is available
          if ! command -v python3 &> /dev/null && ! command -v python &> /dev/null; then
            echo "Python not found, installing..."
            # Try to install Python based on the OS
            if command -v apt-get &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y python3 python3-pip
            elif command -v yum &> /dev/null; then
              sudo yum install -y python3 python3-pip
            elif command -v apk &> /dev/null; then
              sudo apk add --no-cache python3 py3-pip
            else
              echo "Unable to install Python automatically. Please install Python 3 on the runner."
              exit 1
            fi
          fi

          # Determine which Python command to use
          if command -v python3 &> /dev/null; then
            PYTHON_CMD="python3"
            PIP_CMD="python3 -m pip"
          elif command -v python &> /dev/null; then
            PYTHON_CMD="python"
            PIP_CMD="python -m pip"
          else
            echo "Python is not available after installation attempt"
            exit 1
          fi

          echo "Using Python: $PYTHON_CMD"
          $PYTHON_CMD --version

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build Frontend for Performance Tests
        run: |
          echo "📦 Building frontend for performance tests..."
          cd frontend
          npm ci
          CI=false REACT_APP_API_URL="" npm run build
          cd ..
          echo "✅ Frontend ready for backend performance tests"

      - name: Install Dependencies
        run: |
          # Use the same Python detection
          if command -v python3 &> /dev/null; then
            PIP_CMD="python3 -m pip"
            PYTHON_CMD="python3"
          elif command -v python &> /dev/null; then
            PIP_CMD="python -m pip"
            PYTHON_CMD="python"
          else
            echo "Python not found"
            exit 1
          fi

          $PIP_CMD install -r requirements.txt
          $PIP_CMD install uvicorn

      - name: Run Performance Tests
        id: perf-test
        run: |
          # Simple performance test using curl
          echo "🚀 Testing API performance..."

          # Determine which Python command to use
          if command -v python3 &> /dev/null; then
            PYTHON_CMD="python3"
          elif command -v python &> /dev/null; then
            PYTHON_CMD="python"
          else
            echo "Python not found"
            exit 1
          fi

          # Start the backend in background (simplified for demo)
          $PYTHON_CMD -m uvicorn api.main:app --host 0.0.0.0 --port 8000 &
          SERVER_PID=$!
          sleep 10

          # Run performance tests
          for i in {1..10}; do
            response_time=$(curl -o /dev/null -s -w '%{time_total}\n' http://localhost:8000/api/test)
            echo "$response_time" >> response_times.txt
          done

          kill $SERVER_PID

          # Calculate average
          AVG_TIME=$(awk '{sum+=$1} END {print sum/NR}' response_times.txt)
          echo "average_response_time=$AVG_TIME" >> $GITHUB_OUTPUT

      - name: Claude Performance Review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          AVG_TIME="${{ steps.perf-test.outputs.average_response_time }}"

          PERF_REVIEW=$(curl -X POST https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d @- <<EOF | jq -r '.content[0].text'
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 500,
            "messages": [{
              "role": "user",
              "content": "Analyze API performance:\n\nAverage response time: ${AVG_TIME}s\nEndpoint: /api/test\nExpected: <0.1s\n\nProvide:\n1. Performance assessment\n2. Optimization suggestions if needed\n3. Potential bottlenecks"
            }]
          }
          EOF
          )

          echo "### ⚡ Performance Analysis" >> $GITHUB_STEP_SUMMARY
          echo "$PERF_REVIEW" >> $GITHUB_STEP_SUMMARY

  smart-deployment-decision:
    name: Claude Deployment Decision
    needs: [claude-assisted-tests, performance-analysis]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      should_deploy: ${{ steps.claude-decision.outputs.should_deploy }}

    steps:
      - name: Claude Deploy Decision
        id: claude-decision
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Get test results and performance data
          TEST_STATUS="${{ needs.claude-assisted-tests.result }}"
          PERF_TIME="${{ needs.performance-analysis.outputs.average_response_time }}"

          DECISION=$(curl -X POST https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d @- <<EOF | jq -r '.content[0].text'
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 300,
            "messages": [{
              "role": "user",
              "content": "Make deployment decision:\n\nTest Status: $TEST_STATUS\nPerformance: ${PERF_TIME}s average response\nBranch: main\nEnvironment: Production\n\nShould we deploy? Respond with:\n1. DEPLOY or HOLD\n2. Reasoning\n3. Risk assessment"
            }]
          }
          EOF
          )

          echo "## 🚀 Deployment Decision" >> $GITHUB_STEP_SUMMARY
          echo "$DECISION" >> $GITHUB_STEP_SUMMARY

          # Check if Claude recommends deployment
          if echo "$DECISION" | grep -q "DEPLOY"; then
            echo "✅ Claude recommends deployment - proceeding..."
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Claude recommends holding deployment"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  production-deployment:
    name: Deploy to Production
    needs: [smart-deployment-decision]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && needs.smart-deployment-decision.outputs.should_deploy == 'true'

    steps:
      - name: Send Deployment Start Notification
        run: |
          curl -H "Title: 🚀 Production Deployment Starting" \
               -H "Priority: 3" \
               -d "Deploying ${{ github.ref_name }} to production server" \
               https://notify.jacqueswainwright.com/github-runner || true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "Host production" >> ~/.ssh/config
          echo "  HostName 203.0.113.199" >> ~/.ssh/config
          echo "  User root" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/deploy_key" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Check Server Disk Space
        id: disk-check
        run: |
          echo "🔍 Checking production server disk space..."
          DISK_USAGE=$(ssh production df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
          echo "Current disk usage: ${DISK_USAGE}%"

          if [ "$DISK_USAGE" -gt 90 ]; then
            echo "❌ Insufficient disk space on production server (${DISK_USAGE}% used)"
            echo "⚠️ Attempting cleanup..."

            # Try to clean up Docker resources
            ssh production << 'EOF'
              echo "🧹 Cleaning up Docker resources..."
              docker system prune -af --volumes
              docker image prune -af
              docker volume prune -f
              docker builder prune -af

              # Remove old logs
              find /var/log -type f -name "*.log" -mtime +7 -delete 2>/dev/null || true

              # Check space again
              df -h /
          EOF

            # Check disk usage again after cleanup
            DISK_USAGE_AFTER=$(ssh production df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
            echo "Disk usage after cleanup: ${DISK_USAGE_AFTER}%"

            if [ "$DISK_USAGE_AFTER" -gt 90 ]; then
              echo "disk_space_ok=false" >> $GITHUB_OUTPUT
              echo "❌ Still insufficient disk space after cleanup"
              exit 1
            else
              echo "disk_space_ok=true" >> $GITHUB_OUTPUT
              echo "✅ Disk space recovered successfully"
            fi
          else
            echo "disk_space_ok=true" >> $GITHUB_OUTPUT
            echo "✅ Sufficient disk space available"
          fi

      - name: Deploy to Production
        if: steps.disk-check.outputs.disk_space_ok == 'true'
        run: |
          echo "🚀 Deploying to production server..."

          # Check what changed to determine build strategy
          CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD 2>/dev/null || echo "")
          BUILD_ARGS=""

          # Check if we need a full rebuild
          if echo "$CHANGED_FILES" | grep -qE "(Dockerfile|requirements\.txt|package\.json)"; then
            echo "📦 Dependencies or Dockerfile changed - full rebuild required"
            BUILD_ARGS="--no-cache"
          elif echo "$CHANGED_FILES" | grep -q "^frontend/"; then
            echo "🎨 Frontend changed - rebuilding frontend layers"
            BUILD_ARGS=""
          else
            echo "⚡ Only backend changes - using cached layers"
            BUILD_ARGS=""
          fi

          # Execute deployment on production server
          ssh production << EOF
            set -e
            cd /root/elec-token-vending-original

            # Pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main

            # Build with appropriate strategy
            echo "🛑 Stopping containers..."
            docker compose down

            echo "🔨 Building backend with: docker compose build ${BUILD_ARGS} backend"
            docker compose build ${BUILD_ARGS} backend

            echo "🚀 Starting containers..."
            docker compose up -d

            echo "✅ Deployment completed successfully"
          EOF

      - name: Verify deployment
        id: verify-deployment
        run: |
          # Wait for services to fully start
          sleep 30

          # Test if the application is accessible
          max_attempts=6
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."

            if curl -f -s -o /dev/null -w "%{http_code}" https://zapvend.com | grep -q "200\|301\|302"; then
              echo "✅ Application is accessible!"
              echo "🎉 Deployment successful!"
              echo "Application URL: https://zapvend.com"

              # Send success notification
              curl -H "Title: ✅ Production Deployment Successful" \
                   -H "Priority: 2" \
                   -d "Successfully deployed to https://zapvend.com" \
                   https://notify.jacqueswainwright.com/github-runner || true

              echo "deployment_verified=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "Application not yet accessible, waiting..."
            sleep 10
            attempt=$((attempt + 1))
          done

          echo "❌ Application verification failed after $max_attempts attempts"
          echo "deployment_verified=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Handle Deployment Failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "Check the logs above for error details."

          # Send failure notification
          curl -H "Title: ❌ Production Deployment Failed" \
               -H "Priority: 5" \
               -d "Deployment to production failed. Check GitHub Actions logs for details." \
               https://notify.jacqueswainwright.com/github-runner || true

          # Try to get more diagnostic information
          echo "📊 Getting diagnostic information..."
          ssh production << 'EOF' || true
            echo "=== Docker Status ==="
            docker ps -a
            echo ""
            echo "=== Recent Docker Logs ==="
            docker compose logs --tail=50 backend
            echo ""
            echo "=== Disk Space ==="
            df -h
            echo ""
            echo "=== Memory Usage ==="
            free -h
          EOF

  final-notifications:
    name: Send Final Notifications
    needs: [smart-analysis, intelligent-build, claude-assisted-tests, performance-analysis, smart-deployment-decision, production-deployment]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Send Success Notification
        if: success()
        run: |
          curl -H "Title: ✅ Claude CI/CD & Deployment Complete" \
               -H "Priority: 2" \
               -d "All CI/CD checks and deployment passed on ${{ github.ref_name }}" \
               https://notify.jacqueswainwright.com/github-runner || true

      - name: Send Failure Notification
        if: failure()
        run: |
          # Check which job failed
          FAILED_JOB=""
          if [ "${{ needs.smart-analysis.result }}" = "failure" ]; then
            FAILED_JOB="Analysis"
          elif [ "${{ needs.intelligent-build.result }}" = "failure" ]; then
            FAILED_JOB="Build"
          elif [ "${{ needs.claude-assisted-tests.result }}" = "failure" ]; then
            FAILED_JOB="Tests"
          elif [ "${{ needs.performance-analysis.result }}" = "failure" ]; then
            FAILED_JOB="Performance Analysis"
          elif [ "${{ needs.production-deployment.result }}" = "failure" ]; then
            FAILED_JOB="Production Deployment"
          else
            FAILED_JOB="Unknown"
          fi

          curl -H "Title: ❌ Claude CI/CD Failed - $FAILED_JOB" \
               -H "Priority: 5" \
               -d "Pipeline failed at $FAILED_JOB stage on ${{ github.ref_name }}. Check logs for details." \
               https://notify.jacqueswainwright.com/github-runner || true

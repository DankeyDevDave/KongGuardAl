name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'CHANGELOG.md'
      - 'docs/**'
      - '*.md'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  test:
    uses: ./.github/workflows/ci.yml

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.repository == 'DankeyDevDave/KongGuardAI' && github.ref == 'refs/heads/main'

    outputs:
      released: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
      tag: ${{ steps.semantic.outputs.new_release_git_tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@latest \
            @semantic-release/changelog@latest \
            @semantic-release/git@latest \
            @semantic-release/github@latest \
            @semantic-release/exec@latest

      - name: Verify semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              ["@semantic-release/changelog", {
                "changelogFile": "CHANGELOG.md"
              }],
              ["@semantic-release/exec", {
                "prepareCmd": "echo '${nextRelease.version}' > VERSION && sed -i 's/__version__ = \".*\"/__version__ = \"${nextRelease.version}\"/' src/kongguard/__init__.py"
              }],
              ["@semantic-release/git", {
                "assets": ["CHANGELOG.md", "VERSION", "src/kongguard/__init__.py"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }],
              ["@semantic-release/github", {
                "assets": [
                  {"path": "dist/*.whl", "label": "Python Package"},
                  {"path": "dist/*.tar.gz", "label": "Source Distribution"},
                  {"path": "kong-plugin/*.rock", "label": "Kong Plugin Rock"}
                ]
              }]
            ]
          }
          EOF

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          pip install --upgrade pip
          pip install build twine hatchling

      - name: Build Python package
        run: |
          python -m build
          ls -la dist/

      - name: Build Kong plugin rock
        run: |
          # Install luarocks
          sudo apt-get update
          sudo apt-get install -y luarocks

          # Build the rock
          cd kong-plugin
          luarocks make --pack-binary-rock kong-guard-ai-*.rockspec
          ls -la *.rock
          cd ..

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
          GIT_COMMITTER_NAME: "github-actions[bot]"
          GIT_COMMITTER_EMAIL: "github-actions[bot]@users.noreply.github.com"
        run: npx semantic-release

  docker-build:
    needs: [test, release]
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [kong-production, fastapi-production]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/kong-guard-ai-${{ matrix.target }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.production
          target: ${{ matrix.target }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  update-deployment:
    needs: [release, docker-build]
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: new-release
          client-payload: |
            {
              "version": "${{ needs.release.outputs.version }}",
              "tag": "${{ needs.release.outputs.tag }}"
            }

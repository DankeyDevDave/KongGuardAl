name: Security Review Gate (Read-Only)

on:
  pull_request:
    branches: [ main, develop, feature/** ]

jobs:
  security-review:
    permissions:
      contents: read
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true

      - name: Incident Summary (24h)
        run: |
          python ai-service/agents/tools/get_incidents.py --since-hours 24 | tee summary.json || true

      - name: Optional Gating (STRICT if env set)
        env:
          GATE_STRICT: ${{ secrets.SECURITY_GATE_STRICT }}
        run: |
          python - << 'PY'
          import json, os, sys
          try:
              with open('summary.json') as f:
                  data = json.load(f)
          except Exception:
              print('No summary available; skipping gate')
              sys.exit(0)
          total = data.get('total_incidents', 0)
          blocked = data.get('blocked', 0)
          allowed = data.get('allowed', 0)
          strict = (os.environ.get('GATE_STRICT','').lower() in ('1','true','yes'))
          if strict and total > 0 and allowed > blocked:
              print(f"STRICT gate failed: allowed={allowed} > blocked={blocked}")
              sys.exit(1)
          print('Gate passed (or not strict).')
          PY

      - name: Propose Policy Diffs (read-only)
        run: |
          python ai-service/agents/tools/propose_policy_diffs.py --since-hours 24 | tee policy_diff.json || true
          python - << 'PY'
          import json
          import sys
          import base64
          try:
              data = json.load(open('policy_diff.json'))
              diff = data.get('diff','')
          except Exception:
              diff = ''
          with open('policy.diff','w') as f:
              f.write(diff)
          PY

      - name: Upload Policy Diff Artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: policy-diff
          path: policy.diff

      - name: Post PR Comment with Policy Proposal
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = `### 🛡️ Adaptive Policy Tuner Proposal\n`;
            try {
              const data = JSON.parse(fs.readFileSync('policy_diff.json','utf8'));
              if (data.decision && data.decision !== 'no_change') {
                body += `Decision: ${data.decision} (Δ=${data.delta})\n`;
                if (data.current_thresholds && data.proposed_thresholds) {
                  body += `\nThresholds:\n- Current: ${JSON.stringify(data.current_thresholds)}\n- Proposed: ${JSON.stringify(data.proposed_thresholds)}\n`;
                }
                const diff = data.diff || '';
                if (diff) body += `\nProposed Diff:\n\n\` + "``diff\n" + diff + "\n```";
              } else {
                body += `No change recommended based on the last 24h telemetry.`;
              }
            } catch (e) {
              body += `Policy diff generation failed.`;
            }
            const pr = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body
            });

      - name: Post PR Comment with Incident Summary
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = `### 🔎 KongGuardAI Security Review (Last 24h)\n`;
            try {
              const data = JSON.parse(fs.readFileSync('summary.json','utf8'));
              const total = data.total_incidents ?? 0;
              const blocked = data.blocked ?? 0;
              const allowed = data.allowed ?? 0;
              const cats = Array.isArray(data.top_categories) ? data.top_categories : [];
              const ips = Array.isArray(data.top_source_ips) ? data.top_source_ips : [];
              body += `- Total incidents: ${total}\n- Blocked: ${blocked} | Allowed: ${allowed}\n`;
              if (cats.length) {
                body += `\nTop Categories:\n\n| Category | Count |\n|---|---:|\n`;
                for (const c of cats) body += `| ${c.attack_category} | ${c.count} |\n`;
              }
              if (ips.length) {
                body += `\nTop Source IPs:\n\n| IP | Count |\n|---|---:|\n`;
                for (const i of ips) body += `| ${i.source_ip} | ${i.count} |\n`;
              }
            } catch (e) {
              body += `No incident summary available.`;
            }
            const pr = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body
            });

      - name: Lint (informational)
        run: |
          pip install flake8
          flake8 ai-service/agents --ignore=E501 || true

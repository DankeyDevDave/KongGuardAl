name: Automated Audit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Start services
      run: |
        docker-compose up -d kong-database redis
        sleep 10
        docker-compose up -d kong-guard-ai-cloud kong-guard-ai-local kong-guard-dashboard
        sleep 30
        
    - name: Wait for services to be healthy
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:28100/health; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:28101/health; do sleep 2; done'
        
    - name: Run audit-quick
      run: make audit-quick
      
    - name: Enforce CI gates
      run: python scripts/ci_gates.py --goals docs/audit/goals.yaml --report docs/audit/runs/latest.json --summary
      
    - name: Upload audit artifacts
      uses: actions/upload-artifact@v3
      with:
        name: audit-results-${{ github.run_number }}
        path: |
          docs/audit/runs/
          docs/audit/live/
        retention-days: 30
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the latest audit report
          const runsDir = 'docs/audit/runs';
          const files = fs.readdirSync(runsDir);
          const latestFile = files
            .filter(f => f.endsWith('-audit.json'))
            .sort()
            .pop();
          
          if (latestFile) {
            const reportPath = path.join(runsDir, latestFile);
            const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
            
            // Generate summary
            const summary = generateSummary(report);
            
            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
          
          function generateSummary(report) {
            const results = report.results || {};
            const providers = report.providers || {};
            
            let summary = '## Kong Guard AI Audit Results\n\n';
            summary += '### Performance Summary\n';
            summary += '| Tier | Total Requests | Blocked | Block Rate | Avg Latency | AI Model |\n';
            summary += '|------|----------------|---------|------------|-------------|----------|\n';
            
            for (const [tierName, tierResults] of Object.entries(results)) {
              const totalBlocked = Object.values(tierResults).reduce((sum, ar) => sum + (ar.blocked || 0), 0);
              const totalRequests = Object.values(tierResults).reduce((sum, ar) => sum + (ar.total_requests || 0), 0);
              const avgLatency = Object.values(tierResults).reduce((sum, ar) => sum + (ar.avg_latency_ms || 0), 0) / Object.keys(tierResults).length;
              const aiModel = providers[tierName] || 'unknown';
              
              const blockRate = totalRequests > 0 ? (totalBlocked / totalRequests * 100).toFixed(1) + '%' : '0.0%';
              
              summary += `| ${tierName.toUpperCase()} | ${totalRequests} | ${totalBlocked} | ${blockRate} | ${avgLatency.toFixed(1)}ms | ${aiModel} |\n`;
            }
            
            summary += '\n### Goal Violations\n';
            const violations = report.goal_violations || [];
            if (violations.length === 0) {
              summary += '✅ All goals met!\n';
            } else {
              for (const violation of violations) {
                summary += `- ❌ ${violation}\n`;
              }
            }
            
            return summary;
          }
          
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v
        
  performance-test:
    runs-on: ubuntu-latest
    needs: audit
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Start services
      run: |
        docker-compose up -d
        sleep 60
        
    - name: Run performance benchmark
      run: |
        # Simple performance test
        for i in {1..100}; do
          curl -s http://localhost:28100/health > /dev/null &
        done
        wait
        
    - name: Check performance
      run: |
        # Check if services are responsive
        curl -f http://localhost:28100/health
        curl -f http://localhost:28101/health
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

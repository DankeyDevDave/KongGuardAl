version: '3.8'

services:
  # Kong Guard AI FastAPI Service
  kong-guard-api:
    build: .
    container_name: kong-guard-api
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://kong:kong@postgres:5432/kongguard
      - REDIS_URL=redis://redis:6379/0
      - KONG_ADMIN_URL=http://kong:8001
      - AI_GATEWAY_ENABLED=false
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - DEBUG=false
    depends_on:
      - postgres
      - redis
    networks:
      - kong-net
    volumes:
      - ./logs:/app/logs
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8000"
      - "prometheus.io/path=/monitoring/metrics"

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: kong-guard-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kong
      - POSTGRES_DB=kongguard
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: kong-guard-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Gateway (if not already running)
  kong:
    image: kong:3.7
    container_name: kong
    restart: unless-stopped
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_PLUGINS=bundled,kong-guard-ai
      - KONG_LUA_PACKAGE_PATH=/opt/kong/plugins/?.lua;;
    ports:
      - "8000:8000"  # Proxy
      - "8443:8443"  # Proxy SSL
      - "8001:8001"  # Admin API
      - "8444:8444"  # Admin API SSL
    volumes:
      - ./kong-guard-ai:/opt/kong/plugins/kong-guard-ai
    networks:
      - kong-net
    depends_on:
      - kong-db

  kong-db:
    image: postgres:16-alpine
    container_name: kong-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kong
      - POSTGRES_DB=kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net

  # Kong migrations
  kong-migrations:
    image: kong:3.7
    container_name: kong-migrations
    command: kong migrations bootstrap
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kong
    networks:
      - kong-net
    depends_on:
      - kong-db
    restart: on-failure

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    networks:
      - kong-net

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - kong-net
    depends_on:
      - prometheus

networks:
  kong-net:
    driver: bridge

volumes:
  postgres_data:
  kong_data:
  redis_data:
  prometheus_data:
  grafana_data:

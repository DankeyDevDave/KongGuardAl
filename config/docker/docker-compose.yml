networks:
  kong-net:
    driver: bridge

volumes:
  kong-datastore:
  konga-datastore:
  kong-plugins:

services:
  # PostgreSQL Database for Kong
  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - kong-datastore:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kongpass}
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-25432}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Kong Database Migration
  kong-migrations:
    image: kong:3.8.0
    container_name: kong-migrations
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: ${KONG_DATABASE:-postgres}
      KONG_PG_HOST: ${KONG_PG_HOST:-kong-database}
      KONG_PG_PORT: ${KONG_PG_PORT:-5432}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kongpass}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}

  # Kong Gateway
  kong:
    image: kong:3.8.0
    container_name: kong-gateway
    user: "${KONG_USER:-kong}"
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    networks:
      - kong-net
    ports:
      - "${KONG_PROXY_EXTERNAL_PORT:-28080}:8000/tcp"
      - "${KONG_PROXY_SSL_EXTERNAL_PORT:-28443}:8443/tcp"
      - "${KONG_ADMIN_EXTERNAL_PORT:-28081}:8001/tcp"
      - "${KONG_ADMIN_SSL_EXTERNAL_PORT:-28444}:8444/tcp"
    volumes:
      - ./kong-plugin/kong/plugins:/usr/local/share/lua/5.1/kong/plugins
      # - ./kong.conf:/etc/kong/kong.conf
    environment:
      KONG_DATABASE: ${KONG_DATABASE:-postgres}
      KONG_PG_HOST: ${KONG_PG_HOST:-kong-database}
      KONG_PG_PORT: ${KONG_PG_PORT:-5432}
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kongpass}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_PLUGINS: "kong-guard-ai"
      # KONG_LUA_PACKAGE_PATH: "/usr/local/share/lua/5.1/kong/plugins/custom/?.lua;;"
      KONG_LOG_LEVEL: ${KONG_LOG_LEVEL:-debug}
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5

  # Demo API Service for Testing
  demo-api:
    image: kennethreitz/httpbin
    container_name: demo-api
    networks:
      - kong-net
    ports:
      - "${DEMO_API_PORT:-28085}:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status/200"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock malicious API for testing threat detection
  mock-attacker:
    image: nginx:alpine
    container_name: mock-attacker
    networks:
      - kong-net
    ports:
      - "${MOCK_ATTACKER_PORT:-28090}:80"
    volumes:
      - ./mock-attacker/nginx.conf:/etc/nginx/nginx.conf
      - ./mock-attacker/html:/usr/share/nginx/html
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for plugin state management (optional)
  redis:
    image: redis:7-alpine
    container_name: kong-redis
    networks:
      - kong-net
    ports:
      - "${REDIS_EXTERNAL_PORT:-26379}:6379"
    command: redis-server --appendonly yes
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Konga Database (PostgreSQL 11 for compatibility)
  konga-database:
    image: postgres:11
    container_name: konga-database
    restart: on-failure
    networks:
      - kong-net
    environment:
      POSTGRES_USER: ${KONGA_DB_USER:-konga}
      POSTGRES_PASSWORD: ${KONGA_DB_PASSWORD:-kongapass}
      POSTGRES_DB: ${KONGA_DB_DATABASE:-konga}
    volumes:
      - konga-datastore:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "konga"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Konga DB prepare (initialize Konga database)
  konga-prepare:
    image: pantsel/konga:latest
    container_name: konga-prepare
    command: "-c prepare -a postgres -u postgresql://${KONGA_DB_USER:-konga}:${KONGA_DB_PASSWORD:-kongapass}@${KONGA_DB_HOST:-konga-database}:${KONGA_DB_PORT:-5432}/${KONGA_DB_DATABASE:-konga}"
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      konga-database:
        condition: service_healthy
    environment:
      DB_ADAPTER: postgres
      DB_HOST: konga-database
      DB_PORT: 5432
      DB_USER: konga
      DB_PASSWORD: kongapass
      DB_DATABASE: konga

  # Konga - Kong Admin GUI
  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: on-failure
    networks:
      - kong-net
    environment:
      NODE_ENV: production
      TOKEN_SECRET: ${KONGA_TOKEN_SECRET:-km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb}
      DB_ADAPTER: ${KONGA_DB_ADAPTER:-postgres}
      DB_HOST: ${KONGA_DB_HOST:-konga-database}
      DB_PORT: ${KONGA_DB_PORT:-5432}
      DB_USER: ${KONGA_DB_USER:-konga}
      DB_PASSWORD: ${KONGA_DB_PASSWORD:-kongapass}
      DB_DATABASE: ${KONGA_DB_DATABASE:-konga}
    ports:
      - "${KONGA_UI_PORT:-21337}:1337"
    depends_on:
      konga-database:
        condition: service_healthy
      konga-prepare:
        condition: service_completed_successfully
      kong:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:1337"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana for monitoring and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kong-guard-grafana
    restart: on-failure
    networks:
      - kong-net
    ports:
      - "${GRAFANA_PORT:-33000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=KongGuard2024!
      - GF_INSTALL_PLUGINS=
    volumes:
      - ./grafana-data:/var/lib/grafana
      - ./grafana-local/provisioning:/etc/grafana/provisioning
      - ./grafana-local/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana-mcp:
    image: mcp/grafana:latest
    container_name: grafana-mcp-server
    restart: on-failure
    networks:
      - kong-net
    depends_on:
      - grafana
    ports:
      - "${GRAFANA_MCP_PORT:-38000}:8000"
    environment:
      - GRAFANA_URL=${GRAFANA_MCP_URL:-http://grafana:3000}
      - GRAFANA_SERVICE_ACCOUNT_TOKEN=${GRAFANA_MCP_SERVICE_ACCOUNT_TOKEN}

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: kong-guard-prometheus
    restart: on-failure
    networks:
      - kong-net
    ports:
      - "${PROMETHEUS_PORT:-39090}:9090"
    volumes:
      - ./prometheus-config.yml:/etc/prometheus/prometheus.yml
      - ./prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cloud AI Protection Service
  ai-service-cloud:
    build: ./ai-service
    container_name: kong-guard-ai-cloud
    restart: on-failure
    networks:
      - kong-net
    ports:
      - "${AI_CLOUD_EXTERNAL_PORT:-28100}:8000"
    environment:
      - PORT=8000
      - AI_PROVIDER=${AI_PROVIDER:-openai}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ML_ENABLED=true
      - LOG_LEVEL=INFO
      - ENABLE_FILE_LOGGING=${ENABLE_FILE_LOGGING:-1}
      - LOG_DIR=/app/logs
    volumes:
      - ./ai-service:/app
      - ./logs/cloud-ai:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Local Ollama Protection Service
  ai-service-ollama:
    build: ./ai-service
    container_name: kong-guard-ai-ollama
    restart: on-failure
    networks:
      - kong-net
    ports:
      - "${AI_OLLAMA_EXTERNAL_PORT:-28101}:8000"
    environment:
      - PORT=8000
      - AI_PROVIDER=ollama
      - OLLAMA_HOST=http://host.docker.internal:11434
      - OLLAMA_MODEL=llama3.2:3b
      - ML_ENABLED=true
      - LOG_LEVEL=INFO
      - ENABLE_FILE_LOGGING=${ENABLE_FILE_LOGGING:-1}
      - LOG_DIR=/app/logs
    volumes:
      - ./ai-service:/app
      - ./logs/ollama-ai:/app/logs
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard
  web-dashboard:
    image: nginx:alpine
    container_name: kong-guard-dashboard
    restart: on-failure
    networks:
      - kong-net
    ports:
      - "${DASHBOARD_EXTERNAL_PORT:-8080}:80"
    volumes:
      - ./public/dashboards:/usr/share/nginx/html:ro
      - ./config/nginx/nginx-dashboard.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

version: '3.8'

services:
  # PostgreSQL for Kong
  kong-database:
    image: postgres:16-alpine
    container_name: kong-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    volumes:
      - kong_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Kong migrations
  kong-migrations:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: kong-production
    container_name: kong-migrations
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    networks:
      - kong-net
    depends_on:
      kong-database:
        condition: service_healthy
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Kong Gateway
  kong:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: kong-production
    container_name: kong
    restart: unless-stopped
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_SSL_CERT: /run/secrets/kong_ssl_cert
      KONG_SSL_CERT_KEY: /run/secrets/kong_ssl_key
    secrets:
      - kong_postgres_password
      - kong_ssl_cert
      - kong_ssl_key
    volumes:
      - ./kong-guard-ai:/usr/local/share/lua/5.1/kong/plugins/kong-guard-ai:ro
      - kong_logs:/usr/local/kong/logs
      - kong_prefix:/usr/local/kong
    networks:
      - kong-net
    ports:
      - "${KONG_PROXY_PORT:-8000}:8000"
      - "${KONG_PROXY_SSL_PORT:-8443}:8443"
      - "${KONG_ADMIN_PORT:-127.0.0.1:8001}:8001"
      - "${KONG_ADMIN_SSL_PORT:-127.0.0.1:8444}:8444"
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      replicas: ${KONG_REPLICAS:-2}
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback

  # PostgreSQL for FastAPI
  api-database:
    image: postgres:16-alpine
    container_name: api-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${API_PG_DATABASE:-kongguard}
      POSTGRES_USER: ${API_PG_USER:-kongguard}
      POSTGRES_PASSWORD_FILE: /run/secrets/api_postgres_password
    secrets:
      - api_postgres_password
    volumes:
      - api_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${API_PG_USER:-kongguard}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass $${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    environment:
      REDIS_PASSWORD_FILE: /run/secrets/redis_password
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # FastAPI Management API
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: fastapi-production
    container_name: fastapi
    restart: unless-stopped
    environment:
      DATABASE_URL_FILE: /run/secrets/database_url
      REDIS_URL_FILE: /run/secrets/redis_url
      KONG_ADMIN_URL: http://kong:8001
      SECRET_KEY_FILE: /run/secrets/api_secret_key
      AI_GATEWAY_API_KEY_FILE: /run/secrets/ai_gateway_key
      WORKERS: ${API_WORKERS:-4}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    secrets:
      - api_postgres_password
      - redis_password
      - database_url
      - redis_url
      - api_secret_key
      - ai_gateway_key
    volumes:
      - ./logs:/app/logs
    networks:
      - kong-net
    ports:
      - "${API_PORT:-8080}:8000"
    depends_on:
      - api-database
      - redis
      - kong
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      replicas: ${API_REPLICAS:-2}
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
      - nginx_cache:/var/cache/nginx
      - certbot_webroot:/var/www/certbot:ro
      - certbot_certs:/etc/letsencrypt:ro
    networks:
      - kong-net
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - kong
      - fastapi
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot_webroot:/var/www/certbot
      - certbot_certs:/etc/letsencrypt
      - ./scripts/certbot-renew.sh:/scripts/renew.sh:ro
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - kong-net

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    user: root
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - kong-net
    ports:
      - "${PROMETHEUS_PORT:-127.0.0.1:9090}:9090"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_INSTALL_PLUGINS: redis-datasource,redis-app
      GF_SERVER_ROOT_URL: https://${DOMAIN}/grafana
    secrets:
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - kong-net
    ports:
      - "${GRAFANA_PORT:-127.0.0.1:3000}:3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - kong-net
    ports:
      - "${LOKI_PORT:-127.0.0.1:3100}:3100"
    command: -config.file=/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - kong_logs:/kong_logs:ro
      - ./logs:/app_logs:ro
    networks:
      - kong-net
    command: -config.file=/etc/promtail/config.yml
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  kong-net:
    driver: bridge
    ipam:
      config:
        - subnet: 233.252.0.0/16

volumes:
  kong_data:
  api_data:
  redis_data:
  kong_logs:
  kong_prefix:
  prometheus_data:
  grafana_data:
  loki_data:
  nginx_cache:
  certbot_webroot:
  certbot_certs:

secrets:
  kong_postgres_password:
    file: ./secrets/kong_postgres_password.txt
  api_postgres_password:
    file: ./secrets/api_postgres_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  database_url:
    file: ./secrets/database_url.txt
  redis_url:
    file: ./secrets/redis_url.txt
  api_secret_key:
    file: ./secrets/api_secret_key.txt
  ai_gateway_key:
    file: ./secrets/ai_gateway_key.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  kong_ssl_cert:
    file: ./secrets/server.crt
  kong_ssl_key:
    file: ./secrets/server.key
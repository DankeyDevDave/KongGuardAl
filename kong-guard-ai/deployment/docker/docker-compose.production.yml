# Kong Guard AI Production Docker Compose
# Complete production stack with monitoring and observability

version: '3.8'

networks:
  kong-net:
    driver: bridge
    ipam:
      config:
        - subnet: 233.252.0.0/16
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 233.252.0.0/16

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  kong_logs:
    driver: local

services:
  # Kong Database
  kong-db:
    image: postgres:15-alpine
    container_name: kong-db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-changeme}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # Kong Database Migration
  kong-migration:
    image: kong-guard-ai:latest
    container_name: kong-migration
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-changeme}
      KONG_PG_DATABASE: kong
    command: ["kong", "migrations", "bootstrap"]
    depends_on:
      kong-db:
        condition: service_healthy
    networks:
      - kong-net
    restart: "no"

  # Kong Gateway with Guard AI
  kong-gateway:
    image: kong-guard-ai:latest
    container_name: kong-gateway
    environment:
      # Database Configuration
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-changeme}
      KONG_PG_DATABASE: kong

      # Admin API Configuration
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_ADMIN_ACCESS_LOG: /var/log/kong/admin_access.log
      KONG_ADMIN_ERROR_LOG: /var/log/kong/admin_error.log

      # Proxy Configuration
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_PROXY_ACCESS_LOG: /var/log/kong/access.log
      KONG_PROXY_ERROR_LOG: /var/log/kong/error.log

      # Plugin Configuration
      KONG_PLUGINS: "bundled,kong-guard-ai"
      KONG_LUA_PACKAGE_PATH: "/usr/local/share/lua/5.1/?.lua;;"

      # Logging Configuration
      KONG_LOG_LEVEL: info
      KONG_ACCESS_LOG: /var/log/kong/access.log
      KONG_ERROR_LOG: /var/log/kong/error.log

      # Performance Tuning
      KONG_WORKER_PROCESSES: auto
      KONG_NGINX_WORKER_CONNECTIONS: 4096
      KONG_NGINX_HTTP_CLIENT_BODY_BUFFER_SIZE: 128k
      KONG_NGINX_HTTP_CLIENT_MAX_BODY_SIZE: 100m

      # Security
      KONG_NGINX_HTTP_SERVER_TOKENS: "off"
      KONG_HEADERS: "off"

      # Kong Guard AI Configuration
      KONG_GUARD_AI_AI_API_KEY: ${AI_API_KEY}
      KONG_GUARD_AI_SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      KONG_GUARD_AI_EMAIL_SMTP_SERVER: ${SMTP_SERVER:-smtp.gmail.com}
      KONG_GUARD_AI_EMAIL_FROM: ${EMAIL_FROM:-security@company.com}

    ports:
      - "8000:8000"   # Proxy HTTP
      - "8443:8443"   # Proxy HTTPS
      - "8001:8001"   # Admin API HTTP
      - "8444:8444"   # Admin API HTTPS
    volumes:
      - kong_logs:/var/log/kong
      - ./certs:/etc/kong/certs:ro
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    networks:
      - kong-net
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring
    restart: unless-stopped

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro
    networks:
      - monitoring
    restart: unless-stopped

  # Elasticsearch for Log Storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=kong-guard-ai-logs
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - monitoring
    restart: unless-stopped

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    container_name: logstash
    volumes:
      - ./monitoring/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - kong_logs:/var/log/kong:ro
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx1g -Xms1g"
    depends_on:
      - elasticsearch
    networks:
      - monitoring
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_PASSWORD:-changeme}
    depends_on:
      - elasticsearch
    networks:
      - monitoring
    restart: unless-stopped

  # AlertManager for Alert Management
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring
    restart: unless-stopped

  # Node Exporter for Host Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: unless-stopped

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./monitoring/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - kong-net
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

# Kong Guard AI Docker Compose Test Environment
# Provides isolated testing environment with Kong Gateway and supporting services

version: '3.8'

services:
  # Kong Gateway for testing
  kong-gateway:
    image: kong:3.7-alpine
    platform: linux/amd64
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_PLUGINS: "bundled,kong-guard-ai"
      KONG_LOG_LEVEL: "info"
      KONG_NGINX_WORKER_PROCESSES: "2"
      KONG_ANONYMOUS_REPORTS: "off"
    ports:
      - "8000:8000"  # Proxy port
      - "8001:8001"  # Admin API port
    volumes:
      - ./test-configs:/etc/kong:ro
      - ../../kong/plugins:/usr/local/share/lua/5.1/kong/plugins:ro
      - ./logs:/var/log/kong
    networks:
      - kong-test-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      - mock-upstream

  # Mock upstream service for testing
  mock-upstream:
    image: kennethreitz/httpbin:latest
    platform: linux/amd64
    ports:
      - "8080:80"
    networks:
      - kong-test-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/get"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    platform: linux/amd64
    ports:
      - "6379:6379"
    networks:
      - kong-test-net
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for persistent testing data
  postgres:
    image: postgres:15-alpine
    platform: linux/amd64
    environment:
      POSTGRES_DB: kong_test
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong_test_password
    ports:
      - "5432:5432"
    networks:
      - kong-test-net
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Load testing service with wrk
  load-tester:
    image: nginx:alpine
    platform: linux/amd64
    networks:
      - kong-test-net
    volumes:
      - ./load-test-scripts:/scripts:ro
    command: sleep infinity
    depends_on:
      - kong-gateway

  # Security testing service
  security-tester:
    build:
      context: .
      dockerfile: Dockerfile.security-test
    platform: linux/amd64
    networks:
      - kong-test-net
    volumes:
      - ./security-payloads:/payloads:ro
      - ./test-results:/results
    environment:
      TARGET_URL: "http://kong-gateway:8000"
      ADMIN_URL: "http://kong-gateway:8001"
    depends_on:
      - kong-gateway

  # Test orchestrator
  test-runner:
    build:
      context: ../..
      dockerfile: tests/docker/Dockerfile.test-runner
    platform: linux/amd64
    networks:
      - kong-test-net
    volumes:
      - ../..:/workspace:ro
      - ./test-results:/results
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      KONG_ADMIN_URL: "http://kong-gateway:8001"
      KONG_PROXY_URL: "http://kong-gateway:8000"
      REDIS_URL: "redis://redis:6379"
      POSTGRES_URL: "postgresql://kong:kong_test_password@postgres:5432/kong_test"
      TEST_ENVIRONMENT: "docker"
      CI: "true"
    working_dir: /workspace
    depends_on:
      kong-gateway:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mock-upstream:
        condition: service_healthy

networks:
  kong-test-net:
    driver: bridge
    ipam:
      config:
        - subnet: 233.252.0.0/16

volumes:
  redis-data:
  postgres-data:

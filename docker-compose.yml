version: '3.8'

networks:
  kong-net:
    driver: bridge

volumes:
  kong-datastore:
  kong-plugins:

services:
  # PostgreSQL Database for Kong
  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - kong-datastore:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Kong Database Migration
  kong-migrations:
    image: kong:3.8.0
    container_name: kong-migrations
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong

  # Kong Gateway
  kong:
    image: kong:3.8.0
    container_name: kong-gateway
    user: "${KONG_USER:-kong}"
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"    # Kong proxy port (HTTP)
      - "8443:8443/tcp"    # Kong proxy port (HTTPS)
      - "8001:8001/tcp"    # Kong admin API (HTTP)
      - "8444:8444/tcp"    # Kong admin API (HTTPS)
    volumes:
      - ./plugins:/usr/local/share/lua/5.1/kong/plugins/custom
      - ./kong.conf:/etc/kong/kong.conf
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
      KONG_PROXY_LISTEN: "0.0.0.0:8000, 0.0.0.0:8443 ssl"
      KONG_PLUGINS: "bundled,kong-guard-ai"
      KONG_LUA_PACKAGE_PATH: "/usr/local/share/lua/5.1/kong/plugins/custom/?.lua;;"
      KONG_LOG_LEVEL: debug
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5

  # Demo API Service for Testing
  demo-api:
    image: kennethreitz/httpbin
    container_name: demo-api
    networks:
      - kong-net
    ports:
      - "8080:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status/200"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mock malicious API for testing threat detection
  mock-attacker:
    image: nginx:alpine
    container_name: mock-attacker
    networks:
      - kong-net
    ports:
      - "8090:80"
    volumes:
      - ./mock-attacker/nginx.conf:/etc/nginx/nginx.conf
      - ./mock-attacker/html:/usr/share/nginx/html
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for plugin state management (optional)
  redis:
    image: redis:7-alpine
    container_name: kong-redis
    networks:
      - kong-net
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong AI Gateway (Optional - for advanced AI features)
  # Uncomment if using AI Gateway features
  # kong-ai-gateway:
  #   image: kong/kong-ai-gateway:latest
  #   container_name: kong-ai-gateway
  #   depends_on:
  #     - kong
  #   networks:
  #     - kong-net
  #   ports:
  #     - "8002:8002"
  #   environment:
  #     AI_GATEWAY_KONG_ADMIN_URL: http://kong:8001
  #     AI_GATEWAY_PORT: 8002
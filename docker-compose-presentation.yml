version: '3.8'

networks:
  kong-net:
    driver: bridge

volumes:
  kong-datastore:
  kong-plugins:

services:
  # PostgreSQL Database for Kong
  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - kong-datastore:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
      POSTGRES_DB: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 30s
      timeout: 30s
      retries: 3

  # Kong Database Migration
  kong-migrations:
    image: kong:3.8.0
    container_name: kong-migrations
    command: kong migrations bootstrap
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong

  # Kong Guard AI - Real-Time Threat Analysis Service with WebSocket
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile.websocket
    container_name: kong-guard-ai-realtime
    networks:
      - kong-net
    ports:
      - "8000:8000"  # AI service with WebSocket
    environment:
      AI_PROVIDER: ${AI_PROVIDER:-gemini}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GROQ_API_KEY: ${GROQ_API_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      ENABLE_WEBSOCKET: true
    volumes:
      - ./ai-service/app_with_websocket.py:/app/app.py
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure

  # Kong Gateway with AI Plugin
  kong:
    image: kong:3.8.0
    container_name: kong-gateway
    user: "${KONG_USER:-kong}"
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
      ai-service:
        condition: service_healthy
    networks:
      - kong-net
    ports:
      - "18000:8000/tcp"    # Kong proxy port
      - "18001:8001/tcp"    # Kong admin API
    volumes:
      - ./kong-plugin/kong/plugins:/usr/local/share/lua/5.1/kong/plugins
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PORT: 5432
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_PROXY_LISTEN: "0.0.0.0:8000"
      KONG_PLUGINS: "kong-guard-ai"
      KONG_LOG_LEVEL: info
      AI_SERVICE_URL: http://ai-service:8000
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5

  # Visualization Dashboard
  visualization:
    image: nginx:alpine
    container_name: kong-visualization
    networks:
      - kong-net
    ports:
      - "8080:80"  # Visualization dashboard
    volumes:
      - ./visualization:/usr/share/nginx/html:ro
      - ./nginx/visualization.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - ai-service
    restart: on-failure

  # Demo API Service
  demo-api:
    image: kennethreitz/httpbin
    container_name: demo-api
    networks:
      - kong-net
    ports:
      - "18085:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status/200"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for state management
  redis:
    image: redis:7-alpine
    container_name: kong-redis
    networks:
      - kong-net
    command: redis-server --appendonly yes
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
# Kong Gateway Nginx Configuration Template
# Custom template with shared memory zones for kong-guard-ai plugin

# Nginx user and worker settings
user kong kong;
worker_processes ${{NGINX_WORKER_PROCESSES}};
daemon ${{NGINX_DAEMON}};

pid pids/nginx.pid;
error_log logs/error.log ${{LOG_LEVEL}};

# Worker connections and events
events {
    use epoll;
    worker_connections ${{NGINX_EVENTS_WORKER_CONNECTIONS}};
    multi_accept on;
}

# HTTP block with shared memory zones
http {
    # Basic Nginx settings
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    # Client settings
    client_max_body_size ${{CLIENT_MAX_BODY_SIZE}};
    client_body_buffer_size ${{CLIENT_BODY_BUFFER_SIZE}};
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # Gzip settings
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log logs/access.log main;

    # Real IP settings
    real_ip_header     ${{REAL_IP_HEADER}};
    real_ip_recursive  ${{REAL_IP_RECURSIVE}};

    # Shared memory zones for Kong Guard AI plugin
    lua_shared_dict kong_guard_ai_data 10m;      # Main data storage
    lua_shared_dict kong_guard_ai_counters 10m;  # Rate limiting counters
    lua_shared_dict kong_guard_ai_cache 5m;      # AI response cache
    lua_shared_dict kong_guard_ai_config 1m;     # Configuration cache

    # Standard Kong shared dictionaries
    lua_shared_dict kong                        5m;
    lua_shared_dict kong_locks                  8m;
    lua_shared_dict kong_healthchecks           5m;
    lua_shared_dict kong_process_events         5m;
    lua_shared_dict kong_cluster_events         5m;
    lua_shared_dict kong_rate_limiting_counters 12m;
    lua_shared_dict kong_core_db_cache          ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_core_db_cache_miss     12m;
    lua_shared_dict kong_db_cache               ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_db_cache_miss          12m;

    # Lua settings
    lua_package_path '${{LUA_PACKAGE_PATH}};;';
    lua_package_cpath '${{LUA_PACKAGE_CPATH}};;';
    lua_socket_pool_size ${{LUA_SOCKET_POOL_SIZE}};
    lua_socket_log_errors off;
    lua_max_running_timers 4096;
    lua_max_pending_timers 16384;
    lua_ssl_verify_depth ${{LUA_SSL_VERIFY_DEPTH}};
    lua_ssl_trusted_certificate ${{LUA_SSL_TRUSTED_CERTIFICATE}};
    lua_ssl_protocols ${{LUA_SSL_PROTOCOLS}};

    # Load balancing
    upstream kong_upstream {
        server 0.0.0.1;
        balancer_by_lua_block {
            Kong.balancer()
        }
    }

    # Initialization
    init_by_lua_block {
        Kong = require 'kong'
        Kong.init()
    }

    init_worker_by_lua_block {
        Kong.init_worker()
    }

    # SSL configuration
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;

    # Proxy server block
    server {
        server_name kong;
        listen ${{PROXY_LISTEN}};
        listen ${{PROXY_LISTEN_SSL}} ssl;

        # SSL certificates
        ssl_certificate     ${{SSL_CERT}};
        ssl_certificate_key ${{SSL_CERT_KEY}};
        ssl_protocols       TLSv1.2 TLSv1.3;

        error_page   500 502 503 504  /50x.html;

        location = /50x.html {
            root   html;
        }

        location / {
            default_type                     '';

            set $ctx_ref                     '';
            set $upstream_te                 '';
            set $upstream_host               '';
            set $upstream_upgrade            '';
            set $upstream_connection         '';
            set $upstream_scheme             '';
            set $upstream_uri                '';
            set $upstream_x_forwarded_for    '';
            set $upstream_x_forwarded_proto  '';
            set $upstream_x_forwarded_host   '';
            set $upstream_x_forwarded_port   '';
            set $upstream_x_forwarded_path   '';
            set $upstream_x_forwarded_prefix '';

            rewrite_by_lua_block {
                Kong.rewrite()
            }

            access_by_lua_block {
                Kong.access()
            }

            header_filter_by_lua_block {
                Kong.header_filter()
            }

            body_filter_by_lua_block {
                Kong.body_filter()
            }

            log_by_lua_block {
                Kong.log()
            }

            proxy_http_version      1.1;
            proxy_buffering         off;
            proxy_request_buffering off;

            proxy_set_header      TE                $upstream_te;
            proxy_set_header      Host              $upstream_host;
            proxy_set_header      Upgrade           $upstream_upgrade;
            proxy_set_header      Connection        $upstream_connection;
            proxy_set_header      X-Forwarded-For   $upstream_x_forwarded_for;
            proxy_set_header      X-Forwarded-Proto $upstream_x_forwarded_proto;
            proxy_set_header      X-Forwarded-Host  $upstream_x_forwarded_host;
            proxy_set_header      X-Forwarded-Port  $upstream_x_forwarded_port;
            proxy_set_header      X-Forwarded-Path  $upstream_x_forwarded_path;
            proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;

            proxy_pass_header     Server;
            proxy_pass_header     Date;
            proxy_ssl_name        $upstream_host;
            proxy_ssl_server_name on;
            proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
        }

        location = /kong_error_handler {
            internal;
            uninitialized_variable_warn off;

            rewrite_by_lua_block {
                ;
            }

            access_by_lua_block {
                ;
            }

            content_by_lua_block {
                Kong.handle_error()
            }
        }
    }

    # Admin API server block
    server {
        server_name kong_admin;
        listen ${{ADMIN_LISTEN}};
        listen ${{ADMIN_LISTEN_SSL}} ssl;

        # SSL certificates for admin
        ssl_certificate     ${{ADMIN_SSL_CERT}};
        ssl_certificate_key ${{ADMIN_SSL_CERT_KEY}};
        ssl_protocols       TLSv1.2 TLSv1.3;

        access_log logs/admin_access.log main;

        # Admin API security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

        location / {
            default_type application/json;
            content_by_lua_block {
                Kong.admin_content()
            }
            header_filter_by_lua_block {
                Kong.admin_header_filter()
            }
        }

        location /nginx_status {
            internal;
            access_log off;
            stub_status;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }

    # Status server (optional)
    server {
        server_name kong_status;
        listen ${{STATUS_LISTEN}};

        access_log off;

        location = /status {
            default_type application/json;
            content_by_lua_block {
                local cjson = require "cjson"
                ngx.say(cjson.encode({
                    status = "healthy",
                    version = Kong.version,
                    lua_version = jit and jit.version or _VERSION,
                    timestamp = ngx.time()
                }))
            }
        }

        # Kong Guard AI plugin status endpoint with comprehensive counter metrics
        location = /guard-ai/status {
            default_type application/json;
            content_by_lua_block {
                local cjson = require "cjson"
                local counters = require "kong.plugins.kong-guard-ai.counters"
                local shared_dict = ngx.shared.kong_guard_ai_data

                -- Get comprehensive system statistics
                local system_stats = counters.get_system_stats()

                -- Legacy metrics for backward compatibility
                local legacy_metrics = {
                    total_requests = shared_dict:get("total_requests") or 0,
                    threats_detected = shared_dict:get("threats_detected") or 0,
                    avg_processing_time = shared_dict:get("avg_processing_time") or 0
                }

                local status = {
                    plugin = "kong-guard-ai",
                    version = "1.0.0",
                    status = "active",
                    timestamp = ngx.time(),

                    -- Legacy metrics (for backward compatibility)
                    metrics = legacy_metrics,

                    -- Enhanced counter-based metrics
                    counters = {
                        global = system_stats.global,
                        memory_usage = system_stats.memory,
                        performance = {
                            uptime_seconds = system_stats.uptime_seconds,
                            response_times = system_stats.performance.response_times,
                            error_rate = system_stats.performance.error_rate
                        }
                    }
                }

                ngx.say(cjson.encode(status))
            }
        }

        # Kong Guard AI detailed metrics endpoint for specific IPs
        location ~ /guard-ai/metrics/ip/(.+) {
            default_type application/json;
            content_by_lua_block {
                local cjson = require "cjson"
                local counters = require "kong.plugins.kong-guard-ai.counters"

                local ip = ngx.var[1]
                if not ip then
                    ngx.status = 400
                    ngx.say(cjson.encode({error = "IP address required"}))
                    return
                end

                local ip_stats = counters.get_ip_stats(ip)
                local response_times = counters.get_response_time_percentiles(ip)
                local error_rate = counters.get_error_rate(ip)

                local response = {
                    ip = ip,
                    timestamp = ngx.time(),
                    counters = ip_stats,
                    performance = {
                        response_times = response_times,
                        error_rate = error_rate
                    }
                }

                ngx.say(cjson.encode(response))
            }
        }

        # Kong Guard AI memory usage endpoint
        location = /guard-ai/memory {
            default_type application/json;
            content_by_lua_block {
                local cjson = require "cjson"
                local counters = require "kong.plugins.kong-guard-ai.counters"

                local memory_stats = counters.get_memory_usage()
                memory_stats.timestamp = ngx.time()

                ngx.say(cjson.encode(memory_stats))
            }
        }
    }
}
